1
00:00:00,990 --> 00:00:07,950
To further demonstrate that Penny is still stone cold, such as can be used anywhere within our app.

2
00:00:08,370 --> 00:00:14,820
Let's create a new page, a stats page, which actually we've already set up a page on a route for that.

3
00:00:15,710 --> 00:00:21,690
On this page let's display a table which displays some information about our notes.

4
00:00:22,410 --> 00:00:28,140
So we're going to display the total number of notes that we have and also the total number of characters

5
00:00:28,140 --> 00:00:29,910
of all of our notes combined.

6
00:00:30,690 --> 00:00:36,960
But before we set up this stats page, I've noticed that this mobile menu is not disappearing when we

7
00:00:37,200 --> 00:00:38,850
click to go to a new page.

8
00:00:39,630 --> 00:00:40,860
So let's just quickly fix that.

9
00:00:40,860 --> 00:00:46,080
First number is in source component's layout number.

10
00:00:47,160 --> 00:00:49,110
So let's scroll down to the script section.

11
00:00:49,440 --> 00:00:56,760
So this show, Mobile NAV Ref is what is determining whether or not the mobile menu is shown.

12
00:00:57,090 --> 00:01:04,080
So if I change this to true, we can see that the mobile menu is shown by default.

13
00:01:05,550 --> 00:01:06,720
I'll set that back to false.

14
00:01:06,900 --> 00:01:13,080
So what we could do is just make sure we set this back to false whenever one of our links in the mobile

15
00:01:13,080 --> 00:01:14,070
menu is clicked.

16
00:01:14,280 --> 00:01:17,820
So let's jump up to our route two links here notes.

17
00:01:17,820 --> 00:01:21,540
And that's how we could just add a click handler to both of these.

18
00:01:21,540 --> 00:01:26,610
So I'm going to do a multiple selection here, put my cursor here next to the word roots link, hold

19
00:01:26,610 --> 00:01:32,400
down the alt key and then put another cursor next to this route to link opening tag enter.

20
00:01:32,460 --> 00:01:38,220
I'm allowed to click color and we're just going to set this show mobile now back to false so we can

21
00:01:38,220 --> 00:01:46,200
just to show mobile now equals false say that reload and hopefully this mobile menu will disappear when

22
00:01:46,200 --> 00:01:53,400
we change pages on it does so let's use bonus table component to display some data about our notes.

23
00:01:53,400 --> 00:01:55,140
So we'll just set up the mock up for that.

24
00:01:55,140 --> 00:02:02,070
First, I'll close these files to our stats page source views, views that stop view.

25
00:02:02,430 --> 00:02:07,980
So at a table with some nice styles, we just need to add a normal table with a class of table.

26
00:02:08,220 --> 00:02:18,240
So let's create a table with a class of table and within that will add t head element and body element.

27
00:02:18,630 --> 00:02:25,680
And then in our head element will add arrow so to our table row and within that will add a couple of

28
00:02:25,800 --> 00:02:28,470
T cells, table heading cells.

29
00:02:28,500 --> 00:02:34,320
And in the first one I'll just put the heading stat duplicate that and then in the second table heading,

30
00:02:34,320 --> 00:02:41,110
I'll just put a value say that we can now see our table had a row that and that in our t body will add

31
00:02:41,190 --> 00:02:46,890
a table row on inside that will add a couple of TDs table data cells.

32
00:02:47,430 --> 00:02:53,220
In the first one we want to put the name of our stat, so I'm going to plot number of notes and then

33
00:02:53,220 --> 00:02:56,040
in the second cell we're going to display the actual number of notes.

34
00:02:56,040 --> 00:03:01,500
But for now I'll just put x, x, x and I'll duplicate this table row and then follow the name.

35
00:03:01,500 --> 00:03:10,200
I'll put number of characters, parentheses of all notes, say that to make this table full width we

36
00:03:10,200 --> 00:03:14,400
can just add a class to the table of is dash fold, dash width.

37
00:03:14,930 --> 00:03:19,380
This is just another former class save, but actually I think full width is one word.

38
00:03:19,380 --> 00:03:21,210
So let's get rid of that dash, save that.

39
00:03:21,540 --> 00:03:25,470
And we now have a pretty decent looking table where we can display these stats.

40
00:03:25,590 --> 00:03:29,370
So first, let's set up a getter for displaying the number of notes here.

41
00:03:29,520 --> 00:03:33,050
So let's jump to our store file source stores, store notes.

42
00:03:33,240 --> 00:03:42,480
JS So to get this at a comma and you get up so we could call this total notes count so are equal to

43
00:03:42,480 --> 00:03:44,940
an arrow function pass in the state.

44
00:03:46,290 --> 00:03:50,460
We want to return the total number of notes in our notes right in our state.

45
00:03:50,460 --> 00:03:57,120
So to access our notes array we can do state of notes, so we can just return state start notes and

46
00:03:57,120 --> 00:04:00,720
then to get the number of items in that array or the length of the you.

47
00:04:00,740 --> 00:04:04,290
Right, we can just do dot length and save up.

48
00:04:04,320 --> 00:04:05,780
So let's jump back to views.

49
00:04:05,800 --> 00:04:08,520
That's the view that we need to import to store.

50
00:04:08,610 --> 00:04:15,150
So let's set our script, set up text at a comment which says imports and we're going to import use

51
00:04:15,210 --> 00:04:25,200
store notes from slush stores, lush store notes that we need to assign this to a constant create another

52
00:04:25,200 --> 00:04:32,970
comment here underscore const store notes equals use store notes and we should now be able to use getter.

53
00:04:33,240 --> 00:04:40,620
So let's replace this first x x x up to number of notes with double curly braces and store notes.

54
00:04:40,650 --> 00:04:44,220
That's what did we call it, total notes count.

55
00:04:44,340 --> 00:04:48,540
So store notes, the total notes count, save that.

56
00:04:48,570 --> 00:04:52,200
And we now see that update two, two and we do have two notes.

57
00:04:52,200 --> 00:04:56,430
If we add another note or maybe a couple more, jump back to the stats page.

58
00:04:56,430 --> 00:04:57,780
This now says four.

59
00:04:57,780 --> 00:05:00,450
So you can see that we can easily use everything that's in us to.

60
00:05:00,670 --> 00:05:01,750
Anywhere within our app.

61
00:05:02,080 --> 00:05:07,780
All of the data in our store and all of the results of our guesses are always kept up to date in real

62
00:05:07,780 --> 00:05:10,210
time, regardless of where we go within our app.

63
00:05:10,240 --> 00:05:15,280
So now let's set up one more getter for grabbing the number of characters of all notes, and that should

64
00:05:15,280 --> 00:05:16,480
be number of characters.

65
00:05:17,070 --> 00:05:17,830
Just change that.

66
00:05:17,980 --> 00:05:19,750
So let's jump to a store again.

67
00:05:19,840 --> 00:05:20,900
Add a new Gazza.

68
00:05:21,400 --> 00:05:24,730
We'll call this one Total characters count.

69
00:05:25,420 --> 00:05:29,080
Add an arrow function place in the state.

70
00:05:30,070 --> 00:05:35,530
Now we're going to have to loop through every note that's in our notes array in order to figure out

71
00:05:35,530 --> 00:05:38,140
the total number of characters of all notes.

72
00:05:39,100 --> 00:05:44,080
So we could just set up a variable for counting this, or create a variable called count set that equal

73
00:05:44,080 --> 00:05:45,970
to zero by default.

74
00:05:46,000 --> 00:05:51,370
And then we'll just loop through our notes array, grab the length of the content from each one, and

75
00:05:51,370 --> 00:05:57,260
then add that length to this count variable and then just return this count variable at the end.

76
00:05:57,280 --> 00:05:59,620
So we could use a four each to do this.

77
00:06:00,430 --> 00:06:07,000
So to grab our notes array, we can just do state dot notes that we can use a for each method to loop

78
00:06:07,000 --> 00:06:09,160
through each note in this array.

79
00:06:09,460 --> 00:06:13,090
And as it's looping through and it's looking at each one, we're going to need a placeholder.

80
00:06:13,540 --> 00:06:16,870
So we'll just use note for that, then add an arrow function.

81
00:06:17,200 --> 00:06:17,500
Okay.

82
00:06:17,500 --> 00:06:22,270
So this is going to look at the first note and assign it to this note placeholder so we can just drop

83
00:06:22,270 --> 00:06:22,960
the content.

84
00:06:23,470 --> 00:06:26,560
Note content, notes dot content.

85
00:06:26,950 --> 00:06:30,280
And then to get the length of that string, we can just do dot length.

86
00:06:31,480 --> 00:06:34,510
So we can then just add the result of this to this count variable.

87
00:06:35,260 --> 00:06:40,770
So we can just do count plus equals like that.

88
00:06:40,780 --> 00:06:46,420
And then when it's done, looking at the first item, it'll jump to the second item and then grab the

89
00:06:46,420 --> 00:06:51,820
length from this concept property and just keep adding to this count variable until it's gone completely

90
00:06:51,820 --> 00:06:55,630
through the array so that at the end we can just return this count variable.

91
00:06:55,690 --> 00:06:57,550
So let's just return counts.

92
00:06:57,970 --> 00:06:58,630
Save that.

93
00:06:58,900 --> 00:06:59,910
Reload the page.

94
00:07:00,010 --> 00:07:03,580
Oh, we need to actually use this getter, which we've called total characters.

95
00:07:03,580 --> 00:07:06,340
Count is going to copy that name job to use that stuff.

96
00:07:06,340 --> 00:07:13,090
You select this x, x, x, add double curly braces and then to use our getter, we can just do store

97
00:07:13,090 --> 00:07:18,820
notes, dots, total characters count, save that and we see the update.

98
00:07:18,910 --> 00:07:25,750
And if we jump to the notes page edit one of our notes Joe back we could see this value is now increased

99
00:07:26,050 --> 00:07:32,260
and if we delete all of our notes, jump to the stats page, we now see we have zero notes and zero

100
00:07:32,290 --> 00:07:33,370
total characters.

